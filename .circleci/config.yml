version: 2.1


orbs: 
  slack: circleci/slack@4.4.4
  aws-cli: circleci/aws-cli@2.0.3


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    # Add parameter here
        workflow_id:
            type: string
        

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack \
                 --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # SUCCESS =$(curl -H "token: 6e293650-a25d-4950-b76a-a40052493b7e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            SUCCESS=1
            echo ${SUCCESS}
            if [ ${SUCCESS} = "1" ]
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi


# front-end
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install && npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
          mentions: '@Dejay'
## back-end

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install && npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
          mentions: '@Dejay'


## Test job

  test-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install && npm run test

      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
          mentions: '@Dejay'

  test-backend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Build front-end
          command: |
            # Your code here
            cd backend
            npm install && npm run test

# Run npm build
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Npm Audit Packages
          command: |
           
            cd frontend
            npm install && npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Npm Audit Packages
          command: |
            
            cd backend
            npm install && npm audit fix --audit-level=critical --force

# Deploy infrastructure
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"   
              
       # deploy front end infrastructure
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"    

    # addd ip to  ansible inventory
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            PUBLIC_DNS=$(aws ec2 describe-instances \
                                    --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID}" Name=instance-state-name,Values=running \
                                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                                    --output text)

            echo ${PUBLIC_DNS} >>  .circleci/ansible/inventory.txt
            echo
            echo "Public DNS name: " ${PUBLIC_DNS}
            echo

      - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
      - destroy-environment:
                  workflow_id: '${CIRCLE_WORKFLOW_ID}'  

     

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
            fingerprints: ["bd:21:1b:86:59:e3:54:77:19:f3:e1:0d:d2:1e:ae:1c"] 
      # attach workspace
      - attach_workspace:
            at: ~/       

      - restore_cache:
            keys: ['backend-build']  

      - run:
          name: Install dependencies
          command: |
            
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            echo
            cat .circleci/ansible/inventory.txt

            ansible-playbook \
            -i .circleci/ansible/inventory.txt \
            .circleci/ansible/configure-server.yml

      - destroy-environment:
                  workflow_id: '${CIRCLE_WORKFLOW_ID}' 
      # Here's where you will add some code to rollback on failure   
      
      


  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
            at: ~/
      - run:
          name: Run migrations
          command: |
            # Your code here
            echo    ENVIRONMENT=production                                 > "backend/.env"
            echo    TYPEORM_CONNECTION=postgres                            >> "backend/.env"
            echo    TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts   >> "backend/.env"
            echo    TYPEORM_MIGRATIONS=./src/migrations/*.ts               >> "backend/.env"
            echo    TYPEORM_MIGRATIONS_DIR=./src/migrations                >> "backend/.env"
            echo    NODE_ENV=production                                    >> "backend/.env"
            echo    TYPEORM_HOST=$TYPEORM_HOST                             >> "backend/.env"
            echo    TYPEORM_PORT=$TYPEORM_PORT                             >> "backend/.env"
            echo    TYPEORM_USERNAME=$TYPEORM_USERNAME                     >> "backend/.env"
            echo    TYPEORM_PASSWORD=$TYPEORM_PASSWORD                     >> "backend/.env"
            echo    TYPEORM_DATABASE=$TYPEORM_DATABASE                     >> "backend/.env"

            cd backend
            npm install typescript
            npm run migrations > migrations_dump.txt


            echo
            cat migrations_dump.txt
            echo
            pwd migrations_dump.txt
            echo

          no_output_timeout: 30m  

      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # curl -H "Content-Type: text/plain" -H "token: 6e293650-a25d-4950-b76a-a40052493b7e" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
                data=1
                echo $data
            fi
     # Here's where you will add some code to rollback on failure  
      - persist_to_workspace:
            root: ~/
            paths:
                - project/backend/migrations_dump.txt

      - revert-migrations
      - destroy-environment:
                  workflow_id: '${CIRCLE_WORKFLOW_ID}'
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
          mentions: '@Dejay'

  
  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - attach_workspace:
            at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            npm install webpack-dev-server
            npm install

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
                                    --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID}" Name=instance-state-name,Values=running \
                                    --query 'Reservations[*].Instances[*].PublicDnsName' \
                                    --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"

            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            echo     ENVIRONMENT=production     >>  "frontend/.env"
            echo     NODE_ENV=production        >> "frontend/.env"
            cat "frontend/.env"

      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            ls -la
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive

      - revert-migrations
      - destroy-environment:
                  workflow_id: '${CIRCLE_WORKFLOW_ID}'

      #  Here's where you will add some code to rollback on failure


  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
            fingerprints: ["bd:21:1b:86:59:e3:54:77:19:f3:e1:0d:d2:1e:ae:1c"] 
      # attach workspace
      - attach_workspace:
            at: ~/

      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            # your code here
            apk add --update ansible openssh-client tar gzip nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
            echo    ENVIRONMENT=development                                 > "backend/.env"
            echo    TYPEORM_CONNECTION=postgres                            >> "backend/.env"
            echo    TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts   >> "backend/.env"
            echo    TYPEORM_MIGRATIONS=./src/migrations/*.ts               >> "backend/.env"
            echo    TYPEORM_MIGRATIONS_DIR=./src/migrations                >> "backend/.env"
            echo    NODE_ENV=production                                    >> "backend/.env"
            echo    TYPEORM_HOST=$TYPEORM_HOST                             >> "backend/.env"
            echo    TYPEORM_PORT=$TYPEORM_PORT                             >> "backend/.env"
            echo    TYPEORM_USERNAME=$TYPEORM_USERNAME                     >> "backend/.env"
            echo    TYPEORM_PASSWORD=$TYPEORM_PASSWORD                     >> "backend/.env"
            echo    TYPEORM_DATABASE=$TYPEORM_DATABASE                     >> "backend/.env"

            echo
            cat backend/.env
            
            
      - run:
          name: Deploy  ansible-backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            pwd
            cat ~/project/.circleci/ansible//inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # - run:
      #     name: Install AWS CLI for rollback
      #     when: on_fail
      #     command: |
      #           # sudo add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment:
            workflow_id: '${CIRCLE_WORKFLOW_ID}'
  
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip3 install --upgrade pip
            pip install awscli

      - attach_workspace:
            at: ~/

      - restore_cache:
            keys: ['backend-build']
            
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
                                    --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID}" Name=instance-state-name,Values=running \
                                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                                    --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                                    --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID}" Name=instance-state-name,Values=running \
                                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                                    --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"

            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              echo "working correctly on ${API_URL}"
            else
              echo "not connecting on backend ${API_URL}"
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL=http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com/#/employees
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              echo "connected on frontend ${URL}"
              return 0
            else
              echo "not connected on frontend ${url}"
              return 1
            fi

      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment:
            workflow_id: '${CIRCLE_WORKFLOW_ID}'
            
      # Here's where you will add some code to rollback on failure 
  
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip3 install --upgrade pip
            pip install awscli

      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name=InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
            --tags project=udapeople
      
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment:
            workflow_id: '${CIRCLE_WORKFLOW_ID}'
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID}"

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

            echo OldWorkflowID: ${OldWorkflowID}
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID}"
            echo Stack names: "${STACKS[@]}"

            if [[ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID}" ]] 
            then
              # Delete files from bucket
              echo "s3://udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              # Delete frontend stack
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              # Delete Backend Stack
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi



workflows:
  default:
    jobs:
      - build-frontend:
          context: Udapeople
      - build-backend:
          context: Udapeople
      - test-frontend:
          requires: [build-frontend]
          context: Udapeople
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]  
      - run-migrations:
           context: Udapeople
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]     
      - deploy-backend:
           requires: [run-migrations]
      - smoke-test:
           requires: [deploy-backend, deploy-frontend] 
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]