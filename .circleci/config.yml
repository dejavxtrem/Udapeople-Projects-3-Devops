version: 2.1


orbs: 
  slack: circleci/slack@4.4.4
  aws-cli: circleci/aws-cli@2.0.3


# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi


## front-end
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install && npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
          mentions: '@Dejay'
## back-end

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install && npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
          mentions: '@Dejay'


## Test job

  test-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install && npm run test

      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
          mentions: '@Dejay'

  test-backend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Build front-end
          command: |
            # Your code here
            cd backend
            npm install && npm run test

# Run npm build
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Npm Audit Packages
          command: |
           
            cd frontend
            npm install && npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Npm Audit Packages
          command: |
            
            cd backend
            npm install && npm audit fix --audit-level=critical --force

# Deploy infrastructure
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
              --region ${AWS_DEFAULT_REGION}
          


workflows:
  default:
    jobs:
      - build-frontend:
          context: Udapeople
      - build-backend:
          context: Udapeople
      - test-frontend:
          requires: [build-frontend]
          context: Udapeople
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
           